{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { isPlatform } from '@ionic/react';\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { Filesystem, Directory } from '@capacitor/filesystem';\nimport { Storage } from '@capacitor/storage';\nimport { Capacitor } from '@capacitor/core';\nconst PHOTO_STORAGE = \"photos\";\nexport function usePhotoGallery() {\n  _s();\n\n  const [photos, setPhotos] = useState([]);\n  useEffect(() => {\n    const loadSaved = async () => {\n      const {\n        value\n      } = await Storage.get({\n        key: PHOTO_STORAGE\n      });\n      const photosInStorage = value ? JSON.parse(value) : []; // If running on the web...\n\n      if (!isPlatform('hybrid')) {\n        for (let photo of photosInStorage) {\n          const file = await Filesystem.readFile({\n            path: photo.filepath,\n            directory: Directory.Data\n          }); // Web platform only: Load the photo as base64 data\n\n          photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n        }\n      }\n\n      setPhotos(photosInStorage);\n    };\n\n    loadSaved();\n  }, []);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    Storage.set({\n      key: PHOTO_STORAGE,\n      value: JSON.stringify(newPhotos)\n    });\n  };\n\n  const savePicture = async (photo, fileName) => {\n    let base64Data; // \"hybrid\" will detect Cordova or Capacitor;\n\n    if (isPlatform('hybrid')) {\n      const file = await Filesystem.readFile({\n        path: photo.path\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath);\n    }\n\n    const savedFile = await Filesystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: Directory.Data\n    });\n\n    if (isPlatform('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri)\n      };\n    } else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n    }\n  };\n\n  const deletePhoto = async photo => {\n    // Remove this photo from the Photos reference data array\n    const newPhotos = photos.filter(p => p.filepath !== photo.filepath); // Update photos array cache by overwriting the existing photo array\n\n    Storage.set({\n      key: PHOTO_STORAGE,\n      value: JSON.stringify(newPhotos)\n    }); // delete photo file from filesystem\n\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\n    await Filesystem.deleteFile({\n      path: filename,\n      directory: Directory.Data\n    });\n    setPhotos(newPhotos);\n  };\n\n  return {\n    deletePhoto,\n    photos,\n    takePhoto\n  };\n}\n\n_s(usePhotoGallery, \"rNJeiEBnoDDbCNHI2MVPxiP450E=\");\n\nexport async function base64FromPath(path) {\n  const response = await fetch(path);\n  const blob = await response.blob();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n\n    reader.onload = () => {\n      if (typeof reader.result === 'string') {\n        resolve(reader.result);\n      } else {\n        reject('method did not return a string');\n      }\n    };\n\n    reader.readAsDataURL(blob);\n  });\n} // export async function CurrentPosition(){\n//   var corr;\n//    await Geolocation.getCurrentPosition().then((resp) => {\n//     corr=resp.coords;\n//   }).catch((error) => {\n//   console.log('Error getting location', error);\n//   })\t\n//   return corr;\n//  };","map":{"version":3,"sources":["C:/Users/Manoa/Desktop/App-Andreha/App-Andreha/src/hooks/usePhotoGallery.ts"],"names":["useState","useEffect","isPlatform","Camera","CameraResultType","CameraSource","Filesystem","Directory","Storage","Capacitor","PHOTO_STORAGE","usePhotoGallery","photos","setPhotos","loadSaved","value","get","key","photosInStorage","JSON","parse","photo","file","readFile","path","filepath","directory","Data","webviewPath","data","takePhoto","cameraPhoto","getPhoto","resultType","Uri","source","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","set","stringify","base64Data","base64FromPath","webPath","savedFile","writeFile","uri","convertFileSrc","deletePhoto","filter","p","filename","substr","lastIndexOf","deleteFile","response","fetch","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { isPlatform } from '@ionic/react';\r\n\r\n\r\nimport { Camera, CameraResultType, CameraSource, Photo } from '@capacitor/camera';\r\nimport { Filesystem, Directory } from '@capacitor/filesystem'\r\nimport { Storage } from '@capacitor/storage'\r\nimport { Capacitor } from '@capacitor/core';\r\n\r\nconst PHOTO_STORAGE = \"photos\";\r\nexport function usePhotoGallery() {\r\n\r\n  const [photos, setPhotos] = useState<UserPhoto[]>([]);\r\n\r\n  useEffect(() => {\r\n    const loadSaved = async () => {\r\n      const {value} = await Storage.get({key: PHOTO_STORAGE });\r\n\r\n      const photosInStorage = (value ? JSON.parse(value) : []) as UserPhoto[];\r\n      // If running on the web...\r\n      if (!isPlatform('hybrid')) {\r\n        for (let photo of photosInStorage) {\r\n          const file = await Filesystem.readFile({\r\n            path: photo.filepath,\r\n            directory: Directory.Data\r\n          });\r\n          // Web platform only: Load the photo as base64 data\r\n          photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\r\n        }\r\n      }\r\n      setPhotos(photosInStorage);\r\n    };\r\n    loadSaved();\r\n  }, []);\r\n\r\n  const takePhoto = async () => {\r\n    const cameraPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri,\r\n      source: CameraSource.Camera,\r\n      quality: 100\r\n    });\r\n    const fileName = new Date().getTime() + '.jpeg';\r\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\r\n    const newPhotos = [savedFileImage, ...photos];\r\n    setPhotos(newPhotos);\r\n    Storage.set({key: PHOTO_STORAGE,value: JSON.stringify(newPhotos)});\r\n  };\r\n\r\n  const savePicture = async (photo: Photo, fileName: string): Promise<UserPhoto> => {\r\n    let base64Data: string;\r\n    // \"hybrid\" will detect Cordova or Capacitor;\r\n    if (isPlatform('hybrid')) {\r\n      const file = await Filesystem.readFile({\r\n        path: photo.path!\r\n      });\r\n      base64Data = file.data;\r\n    } else {\r\n      base64Data = await base64FromPath(photo.webPath!);\r\n    }\r\n    const savedFile = await Filesystem.writeFile({\r\n      path: fileName,\r\n      data: base64Data,\r\n      directory: Directory.Data\r\n    });\r\n\r\n    if (isPlatform('hybrid')) {\r\n      // Display the new image by rewriting the 'file://' path to HTTP\r\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\r\n      return {\r\n        filepath: savedFile.uri,\r\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\r\n      };\r\n    }\r\n    else {\r\n      // Use webPath to display the new image instead of base64 since it's\r\n      // already loaded into memory\r\n      return {\r\n        filepath: fileName,\r\n        webviewPath: photo.webPath\r\n      };\r\n    }\r\n  };\r\n\r\n  const deletePhoto = async (photo: UserPhoto) => {\r\n    // Remove this photo from the Photos reference data array\r\n    const newPhotos = photos.filter(p => p.filepath !== photo.filepath);\r\n\r\n    // Update photos array cache by overwriting the existing photo array\r\n    Storage.set({key: PHOTO_STORAGE, value: JSON.stringify(newPhotos) });\r\n\r\n    // delete photo file from filesystem\r\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\r\n    await Filesystem.deleteFile({\r\n      path: filename,\r\n      directory: Directory.Data\r\n    });\r\n    setPhotos(newPhotos);\r\n  };\r\n\r\n  return {\r\n    deletePhoto,\r\n    photos,\r\n    takePhoto\r\n  };\r\n}\r\n\r\nexport interface UserPhoto {\r\n  filepath: string;\r\n  webviewPath?: string;\r\n}\r\n\r\nexport async function base64FromPath(path: string): Promise<string> {\r\n  const response = await fetch(path);\r\n  const blob = await response.blob();\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onerror = reject;\r\n    reader.onload = () => {\r\n      if (typeof reader.result === 'string') {\r\n        resolve(reader.result);\r\n      } else {\r\n        reject('method did not return a string')\r\n      }\r\n    };\r\n    reader.readAsDataURL(blob);\r\n  });\r\n}\r\n\r\n// export async function CurrentPosition(){\r\n//   var corr;\r\n//    await Geolocation.getCurrentPosition().then((resp) => {\r\n//     corr=resp.coords;\r\n//   }).catch((error) => {\r\n//   console.log('Error getting location', error);\r\n//   })\t\r\n//   return corr;\r\n//  };\r\n"]},"metadata":{},"sourceType":"module"}